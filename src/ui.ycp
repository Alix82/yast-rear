/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/rear/ui.ycp
 * Package:	Configuration of rear
 * Summary:	Dialogs definitions
 * Authors:	Thomas Goettlicher <tgoettlicher@suse.de>
 *
 * $Id$
 */

{

textdomain "rear";

import "Rear";
import "Label";
import "Message";
import "Package";
import "Popup";
import "Service";
import "Wizard";
import "Storage";
import "Progress";



define list<string> UsbLocations()
{
   list <string> usblist = [];
   foreach (string usbdev, Rear::usbdevices, { usblist =  add (usblist, "usb://"+usbdev ); });
   return usblist;
}

/**
 * Dialog for seting up Rear
 */
define symbol RearRunDialog () {
    // For translators: Caption of the dialog
    string caption = _("Run Rear");

    // help text for Rear 
    string help = _("<p>Here, run Rear Relax and Recover backup on your computer.</p>") +
    _("<p>.</p>");

    term con = `HBox(`HSpacing(1.5), `VSpacing(18),
    `VBox(
        `HSpacing(80),
        `VSpacing(0.5),
        `LogView (`id (`log), "Rear output:", 8, 0),
        `VSpacing(0.5),
        `HBox (
            `PushButton (`id(`stop), `opt(`key_F5), Label::StopButton ()),
            `PushButton (`id(`run), `opt(`key_F6), _("Run"))
        ),
        `VSpacing(0.5)),
    `HSpacing(1.5)
    );

    Wizard::SetContents (caption, con, help, true, true);
    UI::ChangeWidget (`id (`stop), `Enabled, false);


    string output  = "";
    boolean rear_runs = false;

    symbol ret = nil;
    do
    {
        if (rear_runs)
            ret = (symbol) UI::PollInput();
        else
            ret = (symbol) UI::UserInput ();

        if ((boolean) SCR::Read(.background.output_open) &&
            (integer) SCR::Read(.background.newlines)>0)
        {
            // read the output line from rear:
            list out    = (list)SCR::Read(.background.newout);
            output = out[0]:"";
            if (output != "")
                UI::ChangeWidget (`id(`log), `LastLine, output + "\n");
        }
        else if (!(boolean)SCR::Read(.background.output_open) && rear_runs )
        {
            Popup::Error(_("Done."));
            UI::ChangeWidget (`id (`run), `Enabled, true);
            UI::ChangeWidget (`id (`stop), `Enabled, false);
            rear_runs = false;
        }
        if (ret == `stop)
        {
            SCR::Execute(.background.kill);
            rear_runs = false;
            UI::ChangeWidget (`id (`run), `Enabled, true);
            UI::ChangeWidget (`id (`stop), `Enabled, false);
            ret= nil;
        }
        if (ret == `run)
        {
            rear_runs = true;
            SCR::Execute (.background.run_output, "/usr/sbin/rear");
            UI::ChangeWidget (`id (`stop), `Enabled, true);
            UI::ChangeWidget (`id (`run), `Enabled, false);
            ret = nil;
        }
        sleep (100);
    } while (ret == nil); 
    return ret;
}





/**
 * Dialog for seting up Rear
 */
define symbol RearConfigDialog () {

    // For translators: Caption of the dialog
    string caption = _("Rear Configuration");

    // help text for Rear 
    string help = _("<p>Here, configure Rear Relax and Recover backup for your computer.</p>") +
    _("<p>.</p>");

    list <string> netfs_url = [ Rear::netfs_url ];
    boolean netfs_keep_old_backup = Rear::netfs_keep_old_backup;
    list <string> modules_load = Rear::modules_load;
    list <string> backup_prog_include = Rear::backup_prog_include;
    string output = Rear::output;
    list <string> outputlist = ["ISO", "USB"];
    list <string> usblocation = UsbLocations();
    list <string> nfslocation = ["nfs://hostname/directory"];

    list rescue_device = Rear::usbdevices;
    list backup_type = ["NFS", "USB"];

    list<term> expertMenu = [ `item(`id(`additionalDirs), _("Additional Directories in Backup" )) ,
                              `item(`id(`additionalModules), _("Additional Kernel Modules in Rescue System" )),
                              `item(`id(`scanusb), _("Rescan USB Devices")) ];

    term con = `HBox (`HSpacing (3), `VBox (
        `VSpacing (),
	`Frame (_("Recovery System"), `HBox (`HSpacing (),
	    `VBox (
		`VSpacing (0.5),
		`ComboBox (`id(`output), `opt(`notify, `hstretch), _("&Boot Media"), outputlist),
		`VSpacing (0.5),
		`ComboBox (`id(`rescue_device), `opt(`notify, `hstretch, `editable), _("&Device"), rescue_device),
		`VSpacing (0.5)
	    ), `HSpacing ()
	)),
	`VSpacing (1.5),
	`Frame (_("Backup"), `HBox (`HSpacing (),
	    `VBox (
		`VSpacing (0.5),
		`ComboBox (`id(`backup_type), `opt(`notify, `hstretch), _("&Backup Media"), backup_type),
		`VSpacing (0.5),
		`ComboBox (`id(`netfs_url), `opt(`notify, `hstretch, `editable), _("&Location"), netfs_url),
		`VSpacing (0.5),
		`CheckBox (`id(`netfs_keep_old_backup), `opt(`notify), _("&Keep old backup"), netfs_keep_old_backup),
		`VSpacing (0.5)
	    ), `HSpacing ()
	)),
	`VSpacing (0.5),
        `Right( `MenuButton( _("Advanced"), expertMenu )),
	`VStretch ()
    ), `HSpacing(3));


    Wizard::SetContents (caption, con, help, true, true);
    Wizard::SetNextButton (`next, _("Next"));
    Wizard::SetAbortButton (`abort, _("Abort"));


    /* If config file was manually edited and config options are unknown we show a warning */
    boolean config_conflicts = false;

    if (contains(add(outputlist,""), output))
        UI::ChangeWidget (`id(`output), `Value, output);
    else
        config_conflicts = true;

    string type = toupper(substring(Rear::netfs_url,0,3));
    if (contains(add(backup_type,""), type))
    {
        UI::ChangeWidget (`id(`backup_type), `Value, type);
        if ( type == "NFS" )
        {
           if ( ! contains (nfslocation, Rear::netfs_url) )
              nfslocation = prepend (nfslocation, Rear::netfs_url);
           UI::ChangeWidget (`id(`netfs_url), `Items, nfslocation );
        }
    }
    else
        config_conflicts = true;

    if ( Rear::backup != "NETFS" && Rear::backup !=  "" )
        config_conflicts = true;


    if (config_conflicts && 
        ! Popup::ContinueCancel ( _("Your rear configuration file contains options this YaST2 module cannot configure.\n" 
                                  "Do you want to continue and overwrite these settings?" )))
        return `abort;

    boolean rebuild_combobox_flag = false;


    symbol ret = nil;
    do
    {
        if (ret == `scanusb )
        {
	    rescue_device = Rear::GetUsbDevices();
            UI::ChangeWidget (`id(`rescue_device), `Items, rescue_device );
            UI::ChangeWidget (`id(`rescue_device), `Value, rescue_device[0]:"" );
            usblocation=UsbLocations();
            rebuild_combobox_flag=false; 
        }

        if ( UI::QueryWidget(`id(`output), `Value ) == "ISO")
           UI::ChangeWidget (`id(`rescue_device), `Enabled, false);
	else
           UI::ChangeWidget (`id(`rescue_device), `Enabled, true);

        if ( UI::QueryWidget(`id(`backup_type), `Value ) == "USB" && rebuild_combobox_flag==false)
        {
           UI::ChangeWidget (`id(`netfs_url), `Items, usblocation );
           UI::ChangeWidget (`id(`netfs_url), `Value, usblocation[0]:"" );
           rebuild_combobox_flag=true;
        }

        if ( (string) UI::QueryWidget(`id(`backup_type), `Value ) == "NFS" && rebuild_combobox_flag==true )
        {
           UI::ChangeWidget (`id(`netfs_url), `Items, nfslocation );
           UI::ChangeWidget (`id(`netfs_url), `Value, nfslocation[0]:"" );
           rebuild_combobox_flag=false;
        }


	ret = (symbol) UI::UserInput ();

    } while (!contains ([`back, `abort, `cancel, `next, `ok], ret));

    if (ret == `next || ret == `ok)
    {
	Rear::modified		= true;
	Rear::output		= (string) UI::QueryWidget(`id(`output), `Value );
	Rear::backup		= "NETFS";
	Rear::netfs_url		= (string) UI::QueryWidget(`id(`netfs_url), `Value );
        Rear::netfs_keep_old_backup = (boolean) UI::QueryWidget(`id(`netfs_keep_old_backup), `Value );
//       Rear::modules_load = modules_load;
//       Rear::backup_prog_include = Rear::backup_prog_include;

    }

    return ret;
}

/**
 * The whole sequence
 */
define symbol RearSequence () {

    Wizard::OpenOKDialog ();
    Wizard::SetDesktopTitleAndIcon("rear");
    Wizard::SetNextButton (`next, _("Next"));
    Wizard::SetAbortButton (`abort, _("Abort"));


    /* Rear read dialog caption */
    string caption      = _("Reading Rear Configuration");
    integer steps       = 2;

    Progress::New (caption, " ", steps, [
            _("Analyzing system"),
            _("Reading rear settings"),
        ], [
            _("Analyzing system..."),
            _("Reading rear settings..."),
            _("Finished")
        ],
        ""
    );

    Progress::NextStage();

    string system_check_message = mergestring(Rear::SystemCheck(), "\n");

    if ( system_check_message != "" &&
        ! Popup::ContinueCancel ( system_check_message +"\n"+
                                  _("Do you want to continue anyways?" )))
        return `abort;

    Progress::NextStage();

    Rear::Read ();

    Progress::NextStage();

    symbol ret=nil;
    do {
        ret = RearConfigDialog ();

        if ( ret == `abort ) 
            return ret;

	Rear::Write ();
	Wizard::SetNextButton (`ok, _("Finish"));
	Wizard::SetAbortButton (`back, _("Back"));

	ret = RearRunDialog ();

    } while (! contains ([`abort, `next, `ok ], ret ));

    UI::CloseDialog ();
    return ret;
}

}
