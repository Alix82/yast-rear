/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	modules/Rear.ycp
 * Package:	Configuration of rear
 * Summary:	Rear settings, input and output functions
 * Authors:	Thomas Goettlicher <tgoettlicher@suse.de>
 *
 * $Id$
 *
 * Representation of the Rear configuration.
 * Input and output routines.
 */

{

module "Rear";
textdomain "rear";

import "FileUtils";
import "Progress";

/**
 * Data was modified?
 */
global boolean modified = false;


/**
 * serial port used for rear
 */
global string port	= "";

global string output	= "";

/**
 * Maximum baud rate for the IrDA serial port
 */
global string max_baud_rate	= "0";

/**
 * Read rear settings from /etc/rear/local.conf
 * @return true when file exists
 */
global define boolean ReadSysconfig () {


    if (FileUtils::Exists ("/etc/rear/local.conf"))
    {
	port = (string) SCR::Read (.sysconfig.rear.IRDA_PORT);
	if (port == nil)
	    port = "";

	output = (string) SCR::Read (.sysconfig.rear.OUTPUT);
	if (output == nil)
	    output = "";

	max_baud_rate = (string) SCR::Read (.sysconfig.rear.IRDA_MAX_BAUD_RATE);
	if (max_baud_rate == nil)
	    max_baud_rate = "0";
	return true;
    }
    return false;
}

/**
 * Read all rear settings
 * @return true on success
 */
global define boolean Read () {

    ReadSysconfig ();

    return true;
}

/**
 * Write all rear settings
 * @return true on success
 */
global define boolean Write () {

    if (!modified)
	return true;

    /* Rear read dialog caption */
    string caption	= _("Saving Rear Configuration");
    integer steps	= 2;


    if (port != "")
    {
	SCR::Write (.sysconfig.rear.IRDA_PORT, port);
    }
    if (max_baud_rate != nil)
    {
	SCR::Write (.sysconfig.rear.IRDA_MAX_BAUD_RATE, max_baud_rate);
    }
    SCR::Write (.sysconfig.rear, nil);

    return true;
}

/* EOF */
}
