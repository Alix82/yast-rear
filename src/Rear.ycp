/* ------------------------------------------------------------------------------
 * Copyright (c) 2006-2012 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

 /**
 * File:	modules/Rear.ycp
 * Package:	Configuration of rear
 * Summary:	Rear settings, input and output functions
 * Authors:	Thomas Goettlicher <tgoettlicher@suse.de>
 *
 * $Id$
 *
 * Representation of the Rear configuration.
 * Input and output routines.
 */

{

module "Rear";
textdomain "rear";

import "FileUtils";
import "Storage";

// Data was modified?
global boolean modified = false;

global string backup = "";
global string output = "";
global string netfs_url = "";
global boolean netfs_keep_old_backup = true;
global list<string> modules_load = [];
global list<string> backup_prog_include = [];
global list<string> usbdevices = [];


global define list<string> GetUsbDevices ()
{
    list<string> usbdevs = [];

//    map<string, map> storage = Storage::GetTargetMap();
    map<string, map> storage = Storage::ReReadTargetMap();

    foreach (string device, map devicemap, storage , {
         y2error("device = %1", device); 
         if ( devicemap["transport"]:`none == `usb ) 
         {
                y2error("device %1 is a usb device", device);
                usbdevs = add(usbdevs, device);
         }

    });
    return usbdevs;
}




define list<string> RearListToYCPList ( string rearlist ) {

    list<string> ycplist = [];

    if (rearlist == nil)
        return [];

    ycplist = splitstring (rearlist, " ");
    if ( ycplist[0]:"" == "(" ) ycplist = remove(ycplist,0);
    if (ycplist[size(ycplist)-1]:"" == ")") ycplist = remove(ycplist,size(ycplist)-1);

    return ycplist;

}

define string YCPListToRearList ( list<string> ycplist ) {
    return "(" + mergestring (ycplist, " " ) + ")";
}



/**
 * Read rear settings from /etc/rear/local.conf
 * @return true when file exists
 */
global define boolean ReadSysconfig () {

    usbdevices = GetUsbDevices();

    if (FileUtils::Exists ("/etc/rear/local.conf"))
    {
	backup = (string) SCR::Read (.sysconfig.rear.BACKUP);
	if (backup == nil)
	    backup = "";

	output = (string) SCR::Read (.sysconfig.rear.OUTPUT);
	if (output == nil)
	    output = "";

	netfs_url = (string) SCR::Read (.sysconfig.rear.NETFS_URL);
	if (netfs_url == nil)
	    netfs_url = "";

	string netfs_keep_old_backup_tmp = (string) SCR::Read (.sysconfig.rear.NETFS_KEEP_OLD_BACKUP);
	if ( netfs_keep_old_backup_tmp == "no" || netfs_keep_old_backup_tmp == "n"  )
	    netfs_keep_old_backup = false;
        else
	    netfs_keep_old_backup = true;


	string modules_load_tmp = (string) SCR::Read (.sysconfig.rear.MODULES_LOAD);
        modules_load = RearListToYCPList( modules_load_tmp);

	string backup_prog_include_tmp = (string) SCR::Read (.sysconfig.rear.BACKUP_PROG_INCLUDE);
        backup_prog_include = RearListToYCPList( backup_prog_include_tmp);

	return true;
    }
    return false;
}

/**
 * Read all rear settings
 * @return true on success
 */
global define boolean Read () {

    ReadSysconfig ();

    return true;
}

/**
 * Write all rear settings
 * @return true on success
 */
global define boolean Write () {

    if (!modified)
	return true;

    if (backup != "")
	SCR::Write (.sysconfig.rear.BACKUP, backup);

    if (output != "")
	SCR::Write (.sysconfig.rear.OUTPUT, output);

    if (netfs_url != "")
	SCR::Write (.sysconfig.rear.NETFS_URL, netfs_url);

    if (netfs_keep_old_backup != nil)
        if ( netfs_keep_old_backup )
	    SCR::Write (.sysconfig.rear.NETFS_KEEP_OLD_BACKUP, "yes" );
        else
	    SCR::Write (.sysconfig.rear.NETFS_KEEP_OLD_BACKUP, "no" );

    if (modules_load != [])
	SCR::Write (.sysconfig.rear.MODULES_LOAD, YCPListToRearList(modules_load));

    if (backup_prog_include != [])
	SCR::Write (.sysconfig.rear.BACKUP_PROG_INCLUDE, YCPListToRearList(backup_prog_include));

    SCR::Write (.sysconfig.rear, nil);

    return true;
}

/* EOF */
}
